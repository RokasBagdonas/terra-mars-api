# Generated by Django 3.1 on 2020-09-08 15:50

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
                ('game_map', models.CharField(choices=[('Tharsis', 'Tharsis'), ('Elysium', 'Elysium'), ('Hellas', 'Hellas')], default='Tharsis', max_length=16)),
                ('draft_variant', models.BooleanField(default=True)),
                ('prelude', models.BooleanField(default=False)),
                ('venus_next', models.BooleanField(default=False)),
                ('colonies', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nickname', models.CharField(max_length=32, unique=True)),
                ('motto', models.CharField(blank=True, max_length=128, null=True)),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PlayerScore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('corporation', models.CharField(choices=[('Aphrodite', 'Aphrodite'), ('Aridor', 'Aridor'), ('Arklight', 'Arklight'), ('Celestic', 'Celestic'), ('Cheung Shing Mars', 'Cheung Shing Mars'), ('Credicor', 'Credicor'), ('Ecoline', 'Ecoline'), ('Helion', 'Helion'), ('Interplanetary Cinematics', 'Interplanetary Cinematics'), ('Inventrix', 'Inventrix'), ('Manutech', 'Manutech'), ('Mining Guild', 'Mining Guild'), ('Morning Star Inc.', 'Morning Star Inc.'), ('Phobolog', 'Phobolog'), ('Point Luna', 'Point Luna'), ('Polyphemos', 'Polyphemos'), ('Poseidon', 'Poseidon'), ('Robinson Industries', 'Robinson Industries'), ('Saturn Systems', 'Saturn Systems'), ('Storm Craft Incorporated', 'Storm Craft Incorporated'), ('Terractor', 'Terractor'), ('Tharsis Republic', 'Tharsis Republic'), ('Thorgate', 'Thorgate'), ('United Nations Mars Initiative', 'United Nations Mars Initiative'), ('Valley Trust', 'Valley Trust'), ('Viron', 'Viron'), ('Vitor', 'Vitor')], max_length=64)),
                ('terraform_rating', models.PositiveSmallIntegerField(default=20)),
                ('milestones', models.PositiveSmallIntegerField(default=0)),
                ('awards', models.PositiveSmallIntegerField(default=0)),
                ('greeneries', models.PositiveSmallIntegerField(default=0)),
                ('cities', models.PositiveSmallIntegerField(default=0)),
                ('event_cards', models.SmallIntegerField(default=0)),
                ('automated_cards', models.SmallIntegerField(default=0)),
                ('active_cards', models.SmallIntegerField(default=0)),
                ('resources', models.SmallIntegerField(default=0)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scores', to='mars_api.game')),
                ('player', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='scores', to='mars_api.player')),
            ],
            options={
                'default_related_name': 'scores',
            },
        ),
        migrations.AddConstraint(
            model_name='game',
            constraint=models.CheckConstraint(check=models.Q(game_map__in={'Tharsis', 'Hellas', 'Elysium'}), name="Only {'Hellas', 'Elysium', 'Tharsis'} maps are allowed."),
        ),
        migrations.AddConstraint(
            model_name='playerscore',
            constraint=models.UniqueConstraint(fields=('player', 'game'), name='one_score_per_player_per_game'),
        ),
        migrations.AddConstraint(
            model_name='playerscore',
            constraint=models.UniqueConstraint(fields=('corporation', 'game'), name='only_unique_corporations_per_game'),
        ),
        migrations.AddConstraint(
            model_name='playerscore',
            constraint=models.CheckConstraint(check=models.Q(corporation__in={'Ecoline', 'Storm Craft Incorporated', 'Polyphemos', 'Manutech', 'United Nations Mars Initiative', 'Cheung Shing Mars', 'Arklight', 'Credicor', 'Saturn Systems', 'Terractor', 'Valley Trust', 'Aphrodite', 'Mining Guild', 'Celestic', 'Viron', 'Phobolog', 'Vitor', 'Thorgate', 'Helion', 'Aridor', 'Robinson Industries', 'Tharsis Republic', 'Poseidon', 'Morning Star Inc.', 'Inventrix', 'Interplanetary Cinematics', 'Point Luna'}), name='Only defined corporations are allowed.'),
        ),
        migrations.RemoveConstraint(
            model_name='game',
            name="Only {'Hellas', 'Elysium', 'Tharsis'} maps are allowed.",
        ),
        migrations.AddConstraint(
            model_name='game',
            constraint=models.CheckConstraint(check=models.Q(game_map__in={'Tharsis', 'Hellas', 'Elysium'}), name="Only {'Elysium', 'Hellas', 'Tharsis'} maps are allowed."),
        ),
        migrations.RemoveConstraint(
            model_name='game',
            name="Only {'Elysium', 'Hellas', 'Tharsis'} maps are allowed.",
        ),
        migrations.AddConstraint(
            model_name='game',
            constraint=models.CheckConstraint(check=models.Q(game_map__in={'Tharsis', 'Hellas', 'Elysium'}), name="Only {'Hellas', 'Elysium', 'Tharsis'} maps are allowed."),
        ),
        migrations.RemoveConstraint(
            model_name='game',
            name="Only {'Hellas', 'Elysium', 'Tharsis'} maps are allowed.",
        ),
        migrations.AddConstraint(
            model_name='game',
            constraint=models.CheckConstraint(check=models.Q(game_map__in={'Tharsis', 'Hellas', 'Elysium'}), name="Only {'Elysium', 'Hellas', 'Tharsis'} maps are allowed."),
        ),
        migrations.RemoveConstraint(
            model_name='game',
            name="Only {'Elysium', 'Hellas', 'Tharsis'} maps are allowed.",
        ),
        migrations.AddConstraint(
            model_name='game',
            constraint=models.CheckConstraint(check=models.Q(game_map__in={'Tharsis', 'Hellas', 'Elysium'}), name="Only {'Hellas', 'Elysium', 'Tharsis'} maps are allowed."),
        ),
        migrations.RemoveConstraint(
            model_name='game',
            name="Only {'Hellas', 'Elysium', 'Tharsis'} maps are allowed.",
        ),
        migrations.AddConstraint(
            model_name='game',
            constraint=models.CheckConstraint(check=models.Q(game_map__in={'Tharsis', 'Hellas', 'Elysium'}), name="Only {'Elysium', 'Hellas', 'Tharsis'} maps are allowed."),
        ),
        migrations.RemoveConstraint(
            model_name='game',
            name="Only {'Elysium', 'Hellas', 'Tharsis'} maps are allowed.",
        ),
        migrations.AddConstraint(
            model_name='game',
            constraint=models.CheckConstraint(check=models.Q(game_map__in={'Tharsis', 'Hellas', 'Elysium'}), name="Only {'Elysium', 'Tharsis', 'Hellas'} maps are allowed."),
        ),
        migrations.RemoveConstraint(
            model_name='game',
            name="Only {'Elysium', 'Tharsis', 'Hellas'} maps are allowed.",
        ),
        migrations.AddConstraint(
            model_name='game',
            constraint=models.CheckConstraint(check=models.Q(game_map__in={'Tharsis', 'Hellas', 'Elysium'}), name='Only defined maps are allowed.'),
        ),
    ]
